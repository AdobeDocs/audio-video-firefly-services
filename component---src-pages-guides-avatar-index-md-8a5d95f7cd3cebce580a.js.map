{"version":3,"file":"component---src-pages-guides-avatar-index-md-8a5d95f7cd3cebce580a.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/avatar/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/audio-video-firefly-services/audio-video-firefly-services/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport AvartarPDF from \"../../../images/Avatar-Catalog.pdf\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"getting-started-with-avatar-api\"\n    }}>{`Getting Started with Avatar API`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The Avatar API offers automated video creation at scale. This guide shows you how to get started using the asynchronous APIs for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Generating an avatar video via text input.`}</li>\n      <li parentName=\"ul\">{`Generating an avatar video via an audio input.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"api-features\"\n    }}>{`API features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Select an avatar from a catalog of stock actors.`}</li>\n      <li parentName=\"ul\">{`Select a voice from a catalog of stock voices.`}</li>\n      <li parentName=\"ul\">{`Use your own voice file to create avatar videos.`}</li>\n      <li parentName=\"ul\">{`Set your own image/video as a video background.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <h3 {...{\n      \"id\": \"api-credentials\"\n    }}>{`API credentials`}</h3>\n    <p>{`The required credentials were provided as part of the private beta.\nYou'll need these for this guide:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_id`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_secret`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"storage-solution\"\n    }}>{`Storage solution`}</h3>\n    <p>{`You'll need some type of user-owned storage for the video/audio/image/text files (i.e., Amazon S3 buckets) in order to generate a pre-signed URL to supply as the input for the APIs.`}</p>\n    <p>{`There are a few ways to set this up, described below.`}</p>\n    <h4 {...{\n      \"id\": \"using-amazon-s3-buckets\"\n    }}>{`Using Amazon S3 buckets`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Log in to your AWS account.`}</li>\n      <li parentName=\"ol\">{`Go to s3.`}</li>\n      <li parentName=\"ol\">{`Create a new bucket and name it (for example, `}<inlineCode parentName=\"li\">{`adobeapitesting`}</inlineCode>{`).`}</li>\n      <li parentName=\"ol\">{`Drag and drop the video/audio/image/text file you want to test in the bucket.`}</li>\n      <li parentName=\"ol\">{`Once the upload completes, select the file and go to `}<strong parentName=\"li\">{`Actions`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Select the `}<strong parentName=\"li\">{`Share with presigned url`}</strong>{` option and enter the duration for the pre-signed URL to be valid.`}</li>\n      <li parentName=\"ol\">{`Copy the generated pre-signed URL (it may also automatically be copied when you create it).`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"using-frameio-account\"\n    }}>{`Using Frame.io account`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Log in to your Frame.io account.`}</li>\n      <li parentName=\"ol\">{`Create a project (for example, `}<inlineCode parentName=\"li\">{`AdobeApiTesting`}</inlineCode>{`).`}</li>\n      <li parentName=\"ol\">{`Open the inspect view of your browser. In Chrome, press f12 and go to the `}<strong parentName=\"li\">{`Network`}</strong>{` tab.`}</li>\n      <li parentName=\"ol\">{`Drag and drop the video/audio/image/text file that you want to test in the bucket.`}</li>\n      <li parentName=\"ol\">{`Select the file and click `}<strong parentName=\"li\">{`Download`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`In the `}<strong parentName=\"li\">{`Network`}</strong>{` tab, you will see a `}<inlineCode parentName=\"li\">{`GET`}</inlineCode>{` call using a pre-signed URL to download the file.`}</li>\n      <li parentName=\"ol\">{`Copy that URL to use for your API testing.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"use-googles-direct-link-service\"\n    }}>{`Use Google's direct link service`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`You can use `}<a parentName=\"li\" {...{\n          \"href\": \"https://sites.google.com/site/gdocs2direct/?authuser=1&pli=1\"\n        }}>{`Google's direct link service`}</a>{` to generate downloadable public links for your files.`}</li>\n      <li parentName=\"ol\">{`Before generating a link, you'll need to make sure your file's visibility in your Google Drive is set to `}<strong parentName=\"li\">{`Anyone with the link`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Then try the `}<inlineCode parentName=\"li\">{`curl`}</inlineCode>{` requests for the APIs directly from terminal.`}</li>\n    </ol>\n    <p>{`Alternatively, you can use an HTTP client like `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.postman.com/\"\n      }}>{`Postman`}</a>{` to try out the APIs.`}</p>\n    <h2 {...{\n      \"id\": \"api-walkthrough\"\n    }}>{`API walkthrough`}</h2>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`There is a limit of 2 RPM for Avatar and TTS API endpoints and x100 RPM for the Get Result API, per user.`}</p>\n    <p>{`This endpoint enables you to generate an avatar video. You can provide a text or audio input via a pre-signed URL for generation.`}</p>\n    <h5 {...{\n      \"id\": \"step-1\"\n    }}>{`Step 1`}</h5>\n    <p>{`Ensure you have reference to a valid access token. See the `}<a parentName=\"p\" {...{\n        \"href\": \"#prerequisites\"\n      }}>{`Prerequisites`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"step-2-optional\"\n    }}>{`Step 2 (Optional)`}</h5>\n    <p>{`If you choose to use a text or audio file to generate the video - Upload the input audio file/text file to storage location and generate a presigned url to access the same (Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"#prerequisites\"\n      }}>{`Prerequisites`}</a>{` section for more details).`}</p>\n    <h5 {...{\n      \"id\": \"step-3\"\n    }}>{`Step 3`}</h5>\n    <p>{`In the curl command below, update the `}<strong parentName=\"p\">{`Authorization`}</strong>{` with the bearer token in step 1, `}<strong parentName=\"p\">{`x-api-key`}</strong>{` as per the prerequisite, `}<strong parentName=\"p\">{`mediaType`}</strong>{` as per input type and url with the generated presigned url and run the curl.`}</p>\n    <p>{`Select the curl for `}<inlineCode parentName=\"p\">{`avatar_curl_simple_text`}</inlineCode>{` for text input, `}<inlineCode parentName=\"p\">{`avatar_curl_text_file`}</inlineCode>{` for text file input or `}<inlineCode parentName=\"p\">{`avatar_curl_audio_file`}</inlineCode>{` for audio input.`}</p>\n    <p><inlineCode parentName=\"p\">{`avatarId`}</inlineCode>{` specifies the unique ID of the avatar to be used for avatar generation. Users should refer to the `}<a href={AvartarPDF} target=\"_blank\">{`Catalog`}</a>{` to select and retrieve the appropriate avatarId.`}</p>\n    <p><strong parentName=\"p\">{`avatar_curl_simple_text`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl 'https://audio-video-api.adobe.io/beta/generate-avatar' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \\\\\n  --data-raw '{\n    \"script\": {\n        \"source\": {\n            \"text\": \"<script_text>\"\n        },\n        \"mediaType\": \"text/plain\",\n        \"localeCode\": \"en-US\"\n    },\n    \"voiceId\": \"<voice_id>\",\n    \"avatarId\": \"<avatar_id>\",\n    \"output\": {\n        \"mediaType\": \"video/mp4\"\n    }\n}'\n`}</code></pre>\n    <p><strong parentName=\"p\">{`avatar_curl_text_file`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl 'https://audio-video-api.adobe.io/beta/generate-avatar' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \\\\\n  --data-raw '{\n    \"script\": {\n        \"source\": {\n            \"url\": \"pre-signed url of text file\"\n        },\n        \"mediaType\": \"text/plain\",\n        \"localeCode\": \"en-US\"\n    },\n    \"voiceId\": \"<voice_id>\",\n    \"avatarId\": \"<avatar_id>\",\n    \"output\": {\n        \"mediaType\": \"video/mp4\"\n    }\n}'\n`}</code></pre>\n    <p><strong parentName=\"p\">{`voice_avatar_curl_audio_file`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl 'https://audio-video-api.adobe.io/beta/generate-avatar' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \\\\\n  --data-raw '{\n    \"audio\": {\n        \"source\": {\n            \"url\": \"pre-signed url of input audio\"\n        },\n        \"mediaType\": \"audio/x-wav\",\n        \"localeCode\": \"en-US\"\n    },\n    \"avatarId\": \"<avatar_id>\",\n    \"output\": {\n        \"mediaType\": \"video/mp4\"\n    }\n}'  \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-an-image-or-video-as-background\"\n    }}>{`Using an image or video as background`}</h3>\n    <p>{`You can choose to change the background of the avatar video by providing a pre-signed url of a video or image.`}</p>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../usage/\"\n      }}>{`API Usage`}</a>{` notes to understand the supported formats,aspect ratio etc. for video and image backgrounds.`}</p>\n    <p><strong parentName=\"p\">{`avatar_curl_video_background`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl 'https://audio-video-api.adobe.io/beta/generate-avatar' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \\\\\n  --data-raw '{\n    \"script\": {\n        \"source\": {\n            \"text\": \"<script_text>\"\n        },\n        \"mediaType\": \"text/plain\",\n        \"localeCode\": \"en-US\"\n    },\n    \"voiceId\": \"<voice_id>\",\n    \"avatarId\": \"<avatar_id>\",\n    \"output\": {\n        \"mediaType\": \"video/mp4\",\n        \"background\": {\n            \"type\": \"video\",\n            \"source\": {\n                \"url\": \"<pre-signed url of background video>\"\n            }        \n        }\n    }\n}'  \n`}</code></pre>\n    <p><strong parentName=\"p\">{`avatar_curl_image_background`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl 'https://audio-video-api.adobe.io/beta/generate-avatar' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \\\\\n  --data-raw '{\n    \"script\": {\n        \"source\": {\n            \"text\": \"<script_text>\"\n        },\n        \"mediaType\": \"text/plain\",\n        \"localeCode\": \"en-US\"\n    },\n    \"voiceId\": \"<voice_id>\",\n    \"avatarId\": \"<avatar_id>\",\n    \"output\": {\n        \"mediaType\": \"video/mp4\",\n        \"background\": {\n            \"type\": \"image\",\n            \"source\": {\n                \"url\": \"<pre-signed url of background image>\"\n            }        \n        }\n    }\n}'  \n`}</code></pre>\n    <h5 {...{\n      \"id\": \"step-4\"\n    }}>{`Step 4`}</h5>\n    <p>{`Check the `}<inlineCode parentName=\"p\">{`result_url`}</inlineCode>{` in the response and follow the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"#get-result-api\"\n      }}>{`Get Result API`}</a>{` to get the final result.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"links\": {\n        \"cancel\": {\n            \"href\": \"<cancel_url>\"\n        },\n        \"result\": {\n            \"href\": \"<result_url>\"\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"get-result-api\"\n    }}>{`GET Result API`}</h3>\n    <h5 {...{\n      \"id\": \"step-1-1\"\n    }}>{`Step 1`}</h5>\n    <p>{`Update the `}<inlineCode parentName=\"p\">{`result_url`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Authorization`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`x-api-key`}</inlineCode>{` in the command below.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: The `}<inlineCode parentName=\"p\">{`result_url`}</inlineCode>{` was returned in the response of the Avatar API call.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl --location '<result_url>' \\\\\n  -H 'Authorization: Bearer <token>' \\\\\n  -H 'x-api-key: <client_id>' \n`}</code></pre>\n    <p>{`When the job is complete , you will see the result for the operation.`}</p>\n    <h5 {...{\n      \"id\": \"sample-avatar-api-response\"\n    }}>{`Sample Avatar API response`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`{\n    \"status\": \"succeeded\",\n    \"url\": \"<pre-signed url of the result>\"\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` can be used to download the generated video for the input.`}</p>\n    <h3 {...{\n      \"id\": \"verifying-the-content-credentials-on-output\"\n    }}>{`Verifying the Content Credentials on output`}</h3>\n    <p>{`Introduces a content authentication initiative for AI-generated assets, addressing concerns around content legitimacy.`}</p>\n    <h5 {...{\n      \"id\": \"step-1-2\"\n    }}>{`Step 1`}</h5>\n    <p>{`Download the final output video/audio using the presigned url in the success response of GET Result API.`}</p>\n    <h5 {...{\n      \"id\": \"step-2\"\n    }}>{`Step 2`}</h5>\n    <p>{`Upload the file `}<a parentName=\"p\" {...{\n        \"href\": \"https://contentcredentials.org/verify\"\n      }}>{`https://contentcredentials.org/verify`}</a>{` to check the credentials.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","href","AvartarPDF","target","isMDXComponent"],"sourceRoot":""}